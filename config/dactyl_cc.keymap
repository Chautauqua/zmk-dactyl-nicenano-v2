#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

//  ###########################################################
//  ###########        WORKING 2024/03/23        ###############
//  ###########################################################
// #############            LAYERS            #################

#define SYM_L   1
#define NAV_L   2
#define NAV2_L  3

//#define OTHER_L 4

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define SYMBOL  3

// Desktop and tab navigation shortcuts		

#define DESKTOP_LT   LC(LG(LEFT))
#define DESKTOP_RT   LC(LG(RIGHT))
#define WINDOW_LT    LA(LS(TAB))
#define WINDOW_RT    LA(TAB)
#define TAB_LT       LC(LS(TAB))
#define TAB_RT       LC(TAB)

// NOT USED  &kp LG(LC(LEFT))  &kp LG(LC(RIGHT))
// Generic bindings

#define KILL_WINDOW  LA(F4)
#define MAXIMIZE     LG(UP)
#define MINIMIZE     LG(DOWN)
#define UN_MINIMIZE  LG(LC(N))

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <500>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <150>;
};

&sl { release-after-ms = <2000>; };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };

    macros {
        ZMK_MACRO(inv_qm,

        wait-ms = <10>;
        tap-ms = <10>;
        bindings =
            <&macro_press &kp LALT>,
            <&macro_tap &kp KP_N1 &kp KP_N6 &kp KP_N8>,
            <&macro_release &kp LALT>;

        )
    };

    behaviors {
        //   td_mt_ls: tap_dance_mod_tap {
        //       compatible = "zmk,behavior-tap-dance";
        //       label = "TAP_DANCE_LSHIFT";
        //       #binding-cells = <0>;
        //       tapping-term-ms = <200>;
        //       bindings = <&mt LSHIFT CAPSLOCK>, <&kp LCTRL>;
        //   };
        //   td_mt_rs: tap_dance_mod_tap {
        //       compatible = "zmk,behavior-tap-dance";
        //       label = "TAP_DANCE_RSHIFT";
        //       #binding-cells = <0>;
        //       tapping-term-ms = <200>;
        //       bindings = <&mt RSHIFT CAPSLOCK>, <&kp RCTRL>;
        //   };            
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  `    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |        |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp ESCAPE        &kp N1     &kp N2     &kp N3  &kp N4    &kp N5      &kp N6      &kp N7         &kp N8     &kp N9     &kp N0    &kp BACKSPACE
&kp TAB           &kp Q      &kp W      &kp E   &kp R     &kp T       &kp Y       &kp U          &kp I      &kp O      &kp P     &kp MINUS
&kp LEFT_SHIFT    &kp A      &kp S      &kp D   &kp F     &kp G       &kp H       &kp J          &kp K      &kp L      &kp SEMI  &kp SQT
&kp LEFT_CONTROL  &kp Z      &kp X      &kp C   &kp V     &kp B       &kp N       &kp M          &kp COMMA  &kp DOT    &kp FSLH  &kp BACKSLASH
                  &kp LCTRL  &kp SPACE  &mo 1   &kp HOME  &kp BSPC    &kp DELETE  &kp RIGHT_ALT  &mo 2      &kp ENTER  &kp RGUI
            >;
        };

        LOWER {
            bindings = <
&kp GRAVE  &kp EXCLAMATION  &kp AT_SIGN          &kp HASH   &kp DOLLAR  &kp PERCENT      &kp LCTRL  &kp AMPERSAND  &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DELETE
&kp LT     &none            &kp LC(W)            &kp LC(J)  &kp LC(Y)   &kp LS(LC(T))    &kp PG_UP  &kp HOME       &kp UP         &kp END               &kp P                  &kp PLUS
&kp CAPS   &kp LC(A)        &kp LC(S)            &kp LC(D)  &kp LC(F)   &kp LC(N)        &kp PG_DN  &kp LEFT       &kp DOWN       &kp RIGHT             &kp KP_SUBTRACT        &kp PIPE
&kp CAPS   &kp LC(Z)        &kp LC(X)            &kp LC(C)  &kp LC(V)   &kp ESC          &kp INS    &kp M          &kp LS(COMMA)  &kp LS(DOT)           &kp EQUAL              &kp UNDER
           &kp AMPS         &kp LS(NON_US_BSLH)  &mo LOWER  &kp SPACE   &kp LS(N3)       &kp CARET  &kp DOLLAR     &kp PRCNT      &kp TAB               &kp ESC
            >;
        };

        RAISE {
            bindings = <
&none       &kp N1           &kp N2           &kp N3           &kp N4           &kp N5             &kp N6     &kp N7        &kp N8    &kp N9         &kp N0     &kp C_VOL_UP
&none       &none            &none            &none            &none            &none              &kp PG_UP  &kp HOME      &kp UP    &kp END        &none      &kp C_VOL_DN
&sl SYMBOL  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_4  &kp KP_NUMBER_5    &kp PG_DN  &kp LC(LEFT)  &kp DOWN  &kp LC(RIGHT)  &none      &kp C_MUTE
&kp GRAVE   &kp TILDE2       &none            &none            &none            &none              &kp INS    &none         &kp LBRC  &kp RBRC       &kp FSLH   &kp ASTRK
            &kp NON_US_HASH  &kp TILDE2       &kp COLON        &kp SEMI         &kp DEL            &kp N4     &kp N5        &kp N6    &kp LC(C)      &kp LC(V)
            >;
        };

        SYMBOL {
            bindings = <
&bt BT_CLR  &none   &none   &none   &none   &none     &none   &none   &none   &none   &none   &none
&bt BT_NXT  &none   &none   &none   &none   &none     &none   &none   &none   &none   &none   &none
&bt BT_PRV  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &none
&kp LBKT    &none   &none   &none   &none   &none     &none   &none   &none   &none   &none   &none
            &kp N1  &kp N2  &kp N3  &kp N4  &kp N1    &kp N2  &kp N3  &kp N4  &kp N5  &kp N6
            >;
        };
    };
};

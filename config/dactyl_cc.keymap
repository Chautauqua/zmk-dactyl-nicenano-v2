#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// #############      SWEDISH COMPATIBLE SPECIAL CHARACTERS        #################
#define SE_AA LEFT_BRACKET
#define SE_AE SQT
#define SE_OE SEMICOLON

// #############      LAYERS        #################
#define SYM_L 1
#define NAV_L 2
#define NAV2_L 3
//#define OTHER_L 4

// Desktop and tab navigation shortcuts
#define DESKTOP_LT   LC(LG(LEFT))
#define DESKTOP_RT   LC(LG(RIGHT))
#define WINDOW_LT    LA(LS(TAB))
#define WINDOW_RT    LA(TAB)
#define TAB_LT       LC(LS(TAB))
#define TAB_RT       LC(TAB)

// Generic bindings
#define KILL_WINDOW  LA(F4)
#define MAXIMIZE  LG(UP)
#define MINIMIZE  LG(DOWN)

// Linux specific navigation 
#define DESKTOP_PREV   LG(ESC)
#define DESKTOP_SPEC   LG(O)

#define WINDOW_1   LG(NUMBER_1)
#define WINDOW_2   LG(NUMBER_2)
#define WINDOW_3   LG(NUMBER_3)
#define WINDOW_4   LG(NUMBER_4)
#define WINDOW_5   LG(NUMBER_5)
#define WINDOW_6   LG(NUMBER_6)
#define WINDOW_7   LG(NUMBER_7)
#define WINDOW_8   LG(NUMBER_8)
#define WINDOW_9   LG(NUMBER_9)

#define SEND_W_TO_1   LG(LS(NUMBER_1))
#define SEND_W_TO_2   LG(LS(NUMBER_2))
#define SEND_W_TO_3   LG(LS(NUMBER_3))
#define SEND_W_TO_4   LG(LS(NUMBER_4))
#define SEND_W_TO_5   LG(LS(NUMBER_5))
#define SEND_W_TO_6   LG(LS(NUMBER_6))
#define SEND_W_TO_7   LG(LS(NUMBER_7))
#define SEND_W_TO_8   LG(LS(NUMBER_8))
#define SEND_W_TO_9   LG(LS(NUMBER_9))

#define ROT_LAYOUT          LG(SPACE)
#define TOGGLE_FLOATING     LG(LC(SPACE))
#define MOVE_TO_MASTER      LG(LC(RET))
#define ROTATE_WINDOW_LT    LG(LS(J))
#define ROTATE_WINDOW_RT    LG(LS(K))

#define UN_MINIMIZE     LG(LC(N))

#define SHRINK_WIDTH    LG(LA(H))
#define EXPAND_WIDTH    LG(LA(L))
#define INC_COL         LG(LC(H))
#define DEC_COL         LG(LC(L))
#define INC_MASTER      LG(LS(H))
#define DEC_MASTER      LG(LS(L))

&mt {
    tapping-term-ms = <500>;
};


 &sl {
     release-after-ms = <2000>;
 };

/ {
    macros {
        uppercase_G: uppercase_G {
            label = "uppercase_G";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp G>
                , <&macro_release &kp LSHFT>
                ;
      };
    };

    combos {
        compatible = "zmk,combos";
        combo_q {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp Q>;
        };
        combo_z {
            timeout-ms = <50>;
            key-positions = <5 7>;
            bindings = <&kp Z>;
        };
        combo_aa {
            timeout-ms = <50>;
            key-positions = <6 9>;
            bindings = <&kp SE_AA>;
        };
        combo_ae {
            timeout-ms = <50>;
            key-positions = <7 9>;
            bindings = <&kp SE_AE>;
        };
        combo_oe {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp SE_OE>;
        };
        combo_return {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp RETURN>;
        };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp ESCAPE>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
    &hm QUESTION EXCLAMATION     &kp G    &kp M     &kp P     &kp V                                &hm SQT DQT                          &kp J     &kp K     &hm SEMICOLON COLON     &hm BACKSLASH SLASH     
    &hm LCTRL R     &hm LSHIFT S    &hm LGUI N     &hm LALT D     &kp B                              &hm PLUS EQUAL     &hm LALT A     &hm LGUI E     &hm LSHIFT I     &hm LCTRL H
    &kp X     &kp F    &kp L     &kp C     &kp W                                                    &hm MINUS UNDERSCORE     &kp U     &kp O     &kp Y    &hm COMMA PERIOD 
              &hm  LT LEFT_BRACE &hm  GT RIGHT_BRACE                                                                 &hm LEFT_BRACKET LEFT_PARENTHESIS &hm RIGHT_BRACKET RIGHT_PARENTHESIS 
                      &sl NAV_L   &kp T       &none                  &kp DEL   &kp SPACE    &sl SYM_L 
                      &kp TAB &kp LEFT_ARROW  &kp DOWN_ARROW        &kp UP_ARROW   &kp RIGHT_ARROW   &kp BACKSPACE
            >;
        };





};
};


   
   
        //other_layer {
           // bindings = <
             //   &none     &none     &none      &none          &none       &none           &kp C_PREV         &kp C_PLAY_PAUSE      &kp C_NEXT     &none
               // &none     &none     &none      &none  &none     &kp C_MUTE           &kp C_VOLUME_DOWN         &kp   C_VOLUME_UP    &none     &none
 //               &none     &none     &none      &none          &none       &none           &none       &kp  C_BRIGHTNESS_DEC     &kp    C_BRIGHTNESS_INC  &none
   //                                               &none          &none       &none           &none
     //       >;
       // };
